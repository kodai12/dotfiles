[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'neoclide/denite-git'
on_source = 'denite.nvim'
hook_source = '''
call dein#add('Shougo/denite.nvim')
call dein#add('chemzqm/vim-easygit')
call dein#add('chemzqm/denite-git')
call denite#custom#map(
      \ 'normal',
      \ 'a',
      \ '<denite:do_action:add>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'd',
      \ '<denite:do_action:delete>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'r',
      \ '<denite:do_action:reset>',
      \ 'noremap'
      \)
'''

[[plugins]]
repo = 'pocari/vim-denite-emoji'
depends = ['denite.nvim', 'vim-emoji']

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'chemzqm/unite-location'
depends = ['denite.nvim']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = '''
if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
else
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
endif

if has('nvim')
  call denite#custom#source('file/rec', 'matchers',
        \ ['matcher/cpsm'])
endif

call denite#custom#source('file/rec', 'max_candidates', 10000)
call denite#custom#source('grep', 'max_candidates', 10000)
call denite#custom#source('emoji', 'max_candidates', 10000)

call denite#custom#map('insert', "'",
    \ '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('normal', 'r',
    \ '<denite:do_action:quickfix>', 'noremap')
call denite#custom#map('insert', '<BS>',
  \ '<denite:smart_delete_char_before_caret>', 'noremap')
call denite#custom#map('insert', '<C-h>',
  \ '<denite:smart_delete_char_before_caret>', 'noremap')

call denite#custom#option('default', {
  \ 'auto_accel': v:true,
  \ 'prompt': '>',
  \ 'source_names': 'short',
  \ })

let s:menus = {}
let s:menus.vim = {
  \ 'description': 'Vim',
  \ }
let s:menus.vim.file_candidates = [
  \ ['    > Edit configuation file (init.vim)', '~/.config/nvim/init.vim']
  \ ['    > Edit configuation file (.zshrc)', '~/.zshrc']
  \ ['    > Edit project file (AGW)', '~/Desktop/agw-gateway']
  \ ['    > Edit project file (AGW-dashboard)', '~/Desktop/agw-gateway-dashboard']
  \ ]
call denite#custom#var('menu', 'menus', s:menus)

call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
  \ [ '.git/', '.ropeproject/', '__pycache__/', 'tags',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
    \   'node_modules/', 'target/', '.nuxt/', 'dist/', '.serverless/',
    \   '.serverless_plugins', '.cache/'])

let ignore=&wildignore .
      \ ',*.pyc,.git,.hg,.svn,.serverless,__pycache__,.serverless_plugins,.nuxt,tags,node_modules,.git/tags,.cache'
call denite#custom#var('file/rec', 'command',
      \ ['scantree.py', '--ignore', ignore])

call denite#custom#map(
    \ 'normal',
    \ 'rp',
    \ '<denite:do_action:qfreplace>',
    \ 'noremap')

" https://qiita.com/hrsh7th@github/items/303d46ba13532c502828 {{{
if dein#tap('denite.nvim') && dein#tap('vim-qfreplace')
  function! DeniteQfreplace(context)
    let qflist = []
    for target in a:context['targets']
      if !has_key(target, 'action__path') | continue | endif
      if !has_key(target, 'action__line') | continue | endif
      if !has_key(target, 'action__text') | continue | endif

      call add(qflist, {
            \ 'filename': target['action__path'],
            \ 'lnum': target['action__line'],
            \ 'text': target['word'],
            \ })
    endfor
    call setqflist(qflist)
    call qfreplace#start('tabnew')
  endfunction
  call denite#custom#action('file', 'qfreplace', function('DeniteQfreplace'))
endif
" }}}
'''
hook_add = '''
nnoremap <silent> ;;
      \ :<C-u>Denite command command_history<CR>
'''

#--------------------
# deoplete
#--------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let s:deoplete_custom_option = {
      \ 'auto_complete_delay': 5,
      \ 'auto_refresh_delay': 30,
      \ 'camel_case': v:false,
      \ 'ignore_case': v:true,
      \ 'ignore_sources': {
      \   '_': ['around', 'dictionary', 'omni', 'tag'],
      \   'python': ['around', 'dictionary', 'omni', 'tag', 'member', 'LanguageClient'],
      \   'sh': ['around', 'dictionary', 'omni', 'tag'],
      \   'yaml': ['around', 'dictionary', 'omni', 'tag', 'neosnippet'],
      \   'yaml.docker-compose': ['around', 'dictionary', 'omni', 'tag', 'neosnippet'],
      \   'zsh': ['around', 'dictionary', 'omni', 'tag'],
      \ },
      \ 'omni_patterns': {
      \   'sh': '[^ *\t"{=$]\w*',
      \   'yaml': '[^ *\t"{=$]\w*',
      \   'yaml.docker-compose': '[^ *\t"{=$]\w*',
      \ },
      \ 'max_list': 10000,
      \ 'min_pattern_length': 1,
      \ 'num_processes': 10,
      \ 'on_insert_enter': v:true,
      \ 'on_text_changed_i': v:true,
      \ 'refresh_always': v:false,
      \ 'skip_chars': ['(', ')'],
      \ 'smart_case': v:true,
      \ }
call deoplete#custom#option(s:deoplete_custom_option)

call deoplete#custom#source('_', 'converters', [
      \ 'converter_auto_paren',
      \ 'converter_remove_overlap',
      "\ 'converter_truncate_abbr',
      "\ 'converter_truncate_menu',
      \ ])

"call deoplete#custom#source('look', 'rank', 0)

let s:deoplete_omni_functions = {
      \ 'sh':  'LanguageClient#complete',
      \ 'yaml': 'LanguageClient#complete',
      \ 'yaml.docker-compose': 'LanguageClient#complete',
      \ 'python':  'LanguageClient#complete',
      \ }
call deoplete#custom#source('omni', 'functions', s:deoplete_omni_functions)

call deoplete#custom#source('jedi', 'disabled_syntaxes', ['Comment'])
call deoplete#custom#source('LanguageClient', 'disabled_syntaxes', ['Comment'])
call deoplete#custom#source('LanguageClient', 'matchers', ['matcher_head'])  " matcher_length
call deoplete#custom#source('LanguageClient', 'min_pattern_length', 1)
call deoplete#custom#source('vim', 'disabled_syntaxes', ['Comment'])

inoremap <silent> <expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
inoremap <silent> <expr> <S-TAB>
      \ pumvisible() ? "\<C-p>" :
      \ <SID>check_back_space() ? "\<S-TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

"" jedi
let g:deoplete#sources#jedi#statement_length = 0
let g:deoplete#sources#jedi#short_types = 0
let g:deoplete#sources#jedi#show_docstring = 1
let g:deoplete#sources#jedi#worker_threads = 2
let g:deoplete#sources#jedi#python_path = g:python3_host_prog
let g:deoplete#sources#asm#go_mode = 1
'''
# hook_post_update = '!pip3 install -U --user neovim'

# [[plugins]]
# repo = 'ujihisa/neco-look'
# depends = 'deoplete.nvim'
# on_ft = ['markdown', 'gitrebase', 'gitcommit', 'vcs-commit', 'text', 'help']
# hook_source = '''
# let g:neocomplete#text_mode_filetypes = {
#             \ 'markdown': 1,
#             \ 'gitrebase': 1,
#             \ 'gitcommit': 1,
#             \ 'vcs-commit': 1,
#             \ 'text': 1,
#             \ 'help': 1,
#             \ }
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = 'context_filetype.vim'
# on_event = 'InsertEnter'
# on_i  = 1
# on_ft = ['snippet']
# depends = ['neosnippet-snippets']
# hook_source = '''
#   let g:neosnippet#snippets_directory="~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets/"
#   imap <C-k> <Plug>(neosnippet_expand_or_jump)
#   smap <C-k> <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k> <Plug>(neosnippet_expand_target)
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif
# '''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
depends = ['deoplete.nvim', 'tern_for_vim']
on_ft = ['javascript']

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft   = ['python']
depends = ['deoplete.nvim', 'jedi-vim']
hook_source = '''
  let g:deoplete#sources#jedi#enable_cache   = 1
  let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'padawan-php/deoplete-padawan'
on_event = 'InsertEnter'
on_ft = ['php']
depends = ['deoplete.nvim']
hook_source = '''
  augroup padawan-setting
    autocmd! FileType php setlocal completeopt-=preview
  augroup END
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = ['go']
depends = ['deoplete.nvim']
hook_source = '''
set completeopt+=noinsert
set completeopt+=noselect

let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'
depends = ['deoplete.nvim']
on_ft = ['gitrebase', 'gitcommit']
hook_source = '''
let g:deoplete#sources = {}
let g:deoplete#sources.gitcommit=['github']

let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.gitcommit = '.+'

call deoplete#util#set_pattern(
  \ g:deoplete#omni#input_patterns,
  \ 'gitcommit', [g:deoplete#keyword_patterns.gitcommit])
'''

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
on_ft  = ['vue', 'javascript', 'python', 'css', 'rust']
depends = ['fzf.vim', 'deoplete.nvim']
hook_add = '''
let g:LanguageClient_autoStart = 1
let g:LanguageClient_autoStop = 1
let g:LanguageClient_changeThrottle = 0.5
let g:LanguageClient_completionPreferTextEdit = 0  " should be 0
let g:LanguageClient_diagnosticsList = 'Quickfix'  " default: Quickfix, Location, Disabled
let g:LanguageClient_hasSnippetSupport = 0
let g:LanguageClient_hoverPreview = 'Always'  " Always, Auto, Never
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_selectionUI = 'location-list'  " fzf, quickfix, location-list
let g:LanguageClient_settingsPath = '.lsp.json'
let g:LanguageClient_windowLogMessageLevel = "Warning"  " Error, default: Warning, Info, Log

function! s:lsp()
  nnoremap <buffer><silent> <Space>ld :call LanguageClient_textDocument_definition()<CR>
  nnoremap <buffer><silent> <Space>lrn  :call LanguageClient_textDocument_rename()<CR>
  nnoremap <buffer><silent> <Space>lh  :call LanguageClient_textDocument_hover()<CR>
  nnoremap <buffer><silent> <Space>lrr  :call LanguageClient_textDocument_references()<CR>
  nnoremap <buffer><silent> <Space>lc :call LanguageClient_contextMenu()<CR>
endfunction

augroup my-lsp-cmd
  autocmd!
  autocmd FileType vue,javascript,python,css,rust :call s:lsp()
augroup END

let g:LanguageClient_rootMarkers = {
      \ 'python': ['setup.py', 'LICENSE'],
      \ }
'''
hook_source = '''
let g:LanguageClient_serverCommands = {
      \ 'vue': ['vls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'python': ['pyls'],
      \ 'css': ['css-languageserver', '--stdio'],
      \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
      \ }
'''

#--------------------
# /deoplete
#--------------------

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
let g:gitgutter_diff_args='-w --indent-heuristic'
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added='✚'
let g:gitgutter_sign_modified='➜'
let g:gitgutter_sign_removed='✗'
let g:gitgutter_sign_removed_first_line='↑'
let g:gitgutter_sign_modified_removed='•'
let g:gitgutter_terminal_reports_focus=0
'''
hook_post_source = '''
"{{{
  if &background ==# 'light'
    hi GitGutterAddLine ctermbg=192 guibg=#f0f9e2
    hi GitGutterChangeLine ctermbg=230 guibg=#fff4c9
    hi GitGutterDeleteLine ctermbg=224 guibg=#ffe9ef
  elseif g:colors_name !=# 'nord'
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
  endif
"}}}
'''

# html/css completion
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'xhtml', 'php']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']
hook_add = '''
augroup VimCSS3Syntax
  autocmd!
  autocmd FileType css setlocal iskeyword+=-
augroup END
'''

[[plugins]]
repo = 'ap/vim-css-color'
on_ft = ['css']

# javascript completion
[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript']
hook_post_update = '''
!npm install -g tern
'''
hook_source = '''
let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#depths = 1
let g:deoplete#sources#ternjs#docs = 1
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript']

[[plugins]]
repo = 'prettier/vim-prettier'
on_ft = ['javascript']
hook_add = '''
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'es5'
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo = 'osyo-manga/vim-precious'
# on_ft = ['vue', 'toml']
on_ft = ['toml']
hook_source = '''
  let g:precious_enable_switch_CursorMoved_i = {'*': 0}
  let g:precious_enable_switch_CursorHold    = {'*': 0}
	let g:precious_enable_switchers = {
    \	'*':    {'setfiletype': 0},
    \	'toml': {'setfiletype': 1},
    \	'html': {'setfiletype': 1},
    \	'vue':  {'setfiletype': 1},
	\ }
'''

# rust configuration
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command='~/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_source = '''
  set hidden
  let g:racer_cmd='~/.cargo/bin/racer'
  let $RUST_SRC_PATH="/Users/sakochikodai/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src"
  let g:racer_experimental_completer = 1
  nmap <SPACE>gd <Plug>(rust-def)
  nmap <SPACE>gs <Plug>(rust-def-split)
  nmap <SPACE>gx <Plug>(rust-def-vertical)
  nmap <SPACE>K <Plug>(rust-doc)
'''

#solidity syntax
[[plugins]]
repo = 'tomlion/vim-solidity'
on_ft = ['solidity']

# python completion
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_i = 1
on_ft = ['python']
hook_add = '''
let g:jedi#force_py_version = 3
let g:jedi#use_splits_not_buffers = 'winwidth'
nnoremap <silent> <SPACE>jg :call jedi#goto()<cr>
nnoremap <silent> <SPACE>jag :call jedi#goto_assignments()<cr>
nnoremap <silent> <SPACE>jd :call jedi#show_documentation()<cr>
nnoremap <silent> <SPACE>jrn :call jedi#rename()<cr>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_i = 1
on_ft = ['python']

#------------------------
# python test settings
#------------------------
[[plugins]]
repo = 'tpope/vim-dispatch'
on_ft = ['python']

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
if ='''has('nvim')'''
on_ft = ['python']

[[plugins]]
repo = 'aliev/vim-compiler-python'
on_ft = ['python']
hook_add = '''
let g:python_compiler_fixqflist = 1
'''

[[plugins]]
repo = 'janko-m/vim-test'
on_ft = ['python']
depends = ['vim-dispatch', 'vim-dispatch-neovim']
hook_add = '''
let g:test#strategy = 'dispatch'
let g:test#python#runner = 'nose'
let g:test#javascript#runner = 'jest'
let g:test#rust#runner = 'cargo'
let g:test#runner_commands = ['Nose', 'Jest','Mocha', 'Cargo']
let g:test#preserve_screen = 1
'''
#------------------------
# /python test settings
#------------------------


# go configuration
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'jodosha/vim-godebug'
on_ft = ['go']

# json configuration
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_add = '''
nnoremap <silent> <SPACE>po :PrevimOpen<cr>
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = ['help']
