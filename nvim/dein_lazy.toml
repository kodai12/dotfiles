####################
# Denite:
####################
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
hook_add = '''
let g:neomru#file_mru_limit = 1000
if !exists('g:neomru#file_mru_ignore_pattern')
    let g:neomru#file_mru_ignore_pattern = '\%(^\%(gina\)://\)'
endif
'''

[[plugins]]
repo = 'neoclide/denite-git'
on_source = 'denite.nvim'
hook_source = '''
call denite#custom#map(
      \ 'normal',
      \ 'a',
      \ '<denite:do_action:add>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'd',
      \ '<denite:do_action:delete>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'r',
      \ '<denite:do_action:reset>',
      \ 'noremap'
      \)
'''

[[plugins]]
repo = 'pocari/vim-denite-emoji'
on_source = 'denite.nvim'
depends = ['denite.nvim', 'vim-emoji']

[[plugins]]
repo = 'junegunn/vim-emoji'
on_source = 'vim-denite-emoji'

[[plugins]]
repo = 'Shougo/denite.nvim'
build = ':UpdateRemotePlugins'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
# on_func = ['denite#']
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction
'''
hook_source = '''
source ~/dotfiles/nvim/plugins/denite.rc.vim
source ~/dotfiles/nvim/plugins/denite_menu.rc.vim
'''

####################
# Deoplete:
####################
[[plugins]]
repo = 'Shougo/deoplete.nvim'
build = ':UpdateRemotePlugins'
on_event = 'InsertCharPre'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
hook_source = '''
source ~/dotfiles/nvim/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neopairs.vim'
on_event = ['CompleteDone']
hook_source = '''
let g:neopairs#enable = 1
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
depends = ['deoplte.nvim']
on_event = 'InsertEnter'
hook_source = '''
set cmdheight=2
let g:echodoc#enable_at_startup = 1
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft   = ['python']
depends = ['deoplete.nvim', 'jedi-vim']
hook_source = '''
  let g:deoplete#sources#jedi#enable_cache   = 1
  let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = ['go']
depends = ['deoplete.nvim']
hook_source = '''
set completeopt+=noinsert
set completeopt+=noselect

let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'zchee/deoplete-docker'
on_ft = ['Dockerfile']

[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'
depends = ['deoplete.nvim']
on_ft = ['gitrebase', 'gitcommit']
hook_source = '''
let g:deoplete#sources = {}
let g:deoplete#sources.gitcommit=['github']

let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.gitcommit = '.+'

"call deoplete#util#set_pattern(
"  \ g:deoplete#omni#input_patterns,
"  \ 'gitcommit', [g:deoplete#keyword_patterns.gitcommit])
'''

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
depends = ['deoplete.nvim']
on_ft = ['gitcommit', 'markdown']

####################
# Language Client:
####################
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
on_ft  = ['vue', 'javascript', 'python', 'css', 'rust']
depends = ['deoplete.nvim']
hook_add = '''
source ~/dotfiles/nvim/plugins/language_client.rc.vim
'''

####################
# Interfaces:
####################
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
let g:gitgutter_diff_args='-w --indent-heuristic'
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added='✚'
let g:gitgutter_sign_modified='➜'
let g:gitgutter_sign_removed='✗'
let g:gitgutter_sign_removed_first_line='↑'
let g:gitgutter_sign_modified_removed='•'
let g:gitgutter_terminal_reports_focus=0
'''
hook_post_source = '''
"{{{
  if &background ==# 'light'
    hi GitGutterAddLine ctermbg=192 guibg=#f0f9e2
    hi GitGutterChangeLine ctermbg=230 guibg=#fff4c9
    hi GitGutterDeleteLine ctermbg=224 guibg=#ffe9ef
  elseif g:colors_name !=# 'nord'
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
  endif
"}}}
'''

####################
# Language Plugins:
####################
[[plugins]]
repo = 'tmhedberg/matchit'
on_ft = ['html', 'vim', 'sql', 'php', 'ruby']

# html, css
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'xhtml', 'php', 'ruby', 'eruby', 'vue', 'tsx', 'jsx', 'js', 'ts']
hook_add = '''
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}
'''

# javascript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'ts', 'typescript', 'jsx']

[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'ts', 'typescript']
hook_add = '''
let g:vim_jsx_pretty_colorful_config = 1
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['ts', 'typescript']

# ruby
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']
hook_source = '''
let g:rails_default_file='config/database.yml'
let g:rails_level = 4
let g:rails_mappings=1
let g:rails_modelines=0
" let g:rails_some_option = 1
" let g:rails_statusline = 1
" let g:rails_subversion=0
" let g:rails_syntax = 1
" let g:rails_url='http://localhost:3000'
" let g:rails_ctags_arguments='--languages=-javascript'
" let g:rails_ctags_arguments = ''
function! SetUpRailsSetting()
  nnoremap <buffer><Space>r :R<CR>
  nnoremap <buffer><Space>a :A<CR>
  nnoremap <buffer><Space>m :Rmodel<Space>
  nnoremap <buffer><Space>c :Rcontroller<Space>
  nnoremap <buffer><Space>v :Rview<Space>
  nnoremap <buffer><Space>p :Rpreview<CR>
endfunction

aug MyAutoCmd
  au User Rails call SetUpRailsSetting()
aug END

aug RailsDictSetting
  au!
aug END
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_ft = ['ruby']
hook_source = '''
source ~/dotfiles/nvim/plugins/switch.rc.vim
'''

[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = ['ruby']

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1
on_ft = ['ruby']

# vue
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
autocmd FileType vue syntax sync fromstart
set ttyfast
set lazyredraw
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['vue']

[[plugins]]
repo = 'osyo-manga/vim-precious'
# on_ft = ['vue', 'toml']
on_ft = ['toml']
hook_source = '''
  let g:precious_enable_switch_CursorMoved_i = {'*': 0}
  let g:precious_enable_switch_CursorHold    = {'*': 0}
	let g:precious_enable_switchers = {
    \	'*':    {'setfiletype': 0},
    \	'toml': {'setfiletype': 1},
    \	'html': {'setfiletype': 1},
    \	'vue':  {'setfiletype': 1},
	\ }
'''

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command='~/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_source = '''
  set hidden
  let g:racer_cmd='~/.cargo/bin/racer'
  let $RUST_SRC_PATH="/Users/sakochikodai/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src"
  let g:racer_experimental_completer = 1
"  nmap <SPACE>gd <Plug>(rust-def)
"  nmap <SPACE>gs <Plug>(rust-def-split)
"  nmap <SPACE>gx <Plug>(rust-def-vertical)
"  nmap <SPACE>K <Plug>(rust-doc)
'''

# python
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_i = 1
on_ft = ['python']
hook_add = '''
let g:jedi#force_py_version = 3
"let g:jedi#use_splits_not_buffers = 'winwidth'
augroup custom-jedi
  autocmd FileType python nnoremap <silent> ;; :call jedi#goto()<CR>
  autocmd FileType python nnoremap <silent> K :call jedi#show_documentation()<CR>
augroup END
'''

# go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'jodosha/vim-godebug'
on_ft = ['go']

# scala
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

# docker
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['Dockerfile']

# json
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 1
'''

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# yaml
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['yaml']

# csv
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

####################
# Operation:
####################
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = ['<Plug>(git-messenger']
hook_add = '''
nnoremap <silent>mm :GitMessenger<CR>

hi link gitmessengerPopupNormal CursorLine
hi link gitmessengerHeader Statement
hi link gitmessengerHash Special
hi link gitmessengerHistory Title
hi gitmessengerPopupNormal term=None guifg=#eeeeee guibg=#333333 ctermfg=255 ctermbg=240
hi gitmessengerEndOfBuffer term=None guifg=#333333 guibg=#333333 ctermfg=234 ctermbg=234
'''

[[plugins]]
repo = 'junegunn/goyo.vim'
hook_source = '''
let g:goyo_width = 104
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!

  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif

  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
'''

[[plugins]]
repo = 'kana/vim-operator-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = {nox = '<Plug>'}
hook_add = '''
nnoremap [surround] <Nop>
nmap s [surround]
xnoremap [surround] <Nop>
xmap s [surround]
nmap <silent>[surround]a <Plug>(operator-surround-append)
xmap <silent>[surround]a <Plug>(operator-surround-append)
nmap <silent>[surround]d v<Plug>(textobj-multiblock-a)<Plug>(operator-surround-delete)
xmap <silent>[surround]d <Plug>(operator-surround-delete)
nmap <silent>[surround]r v<Plug>(textobj-multiblock-a)<Plug>(operator-surround-replace)
xmap <silent>[surround]r <Plug>(operator-surround-replace)
'''
hook_source = '''
source ~/.config/nvim/plugins/operator-surround.rc.vim
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap aj <Plug>(textobj-multiblock-a)
omap ij <Plug>(textobj-multiblock-i)
xmap aj <Plug>(textobj-multiblock-a)
xmap ij <Plug>(textobj-multiblock-i)
'''
hook_source = '''
let g:textobj_multiblock_blocks = [
\   [ "(", ")" ],
\   [ "[", "]" ],
\   [ "{", "}" ],
\   [ '<', '>' ],
\   [ '"', '"'],
\   [ "'", "'"],
\   [ "`", "`", 1],
\]
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-blockwise'
depends = ['vim-operator-user', 'vim-textobj-blockwise']
on_map = {n = '<Plug>'}
hook_add = '''
nmap <Space>oc <Plug>(operator-blockwise-change)
nmap <Space>od <Plug>(operator-blockwise-delete)
nmap <Space>oy <Plug>(operator-blockwise-yank)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
xmap ag <Plug>(textobj-line-a)
xmap ig <Plug>(textobj-line-i)
omap ag <Plug>(textobj-line-a)
omap ig <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'
on_func = ['textobj#from_regexp#mapexpr']
hook_add = '''
omap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
xmap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
omap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')
xmap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')
omap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')
xmap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')
omap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
xmap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
omap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')
xmap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')
omap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
xmap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
omap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')
xmap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')
omap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
xmap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
omap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')
xmap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')
omap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
xmap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
omap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')
xmap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')
omap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
xmap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
omap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
xmap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
omap <expr> pl textobj#from_regexp#mapexpr('\v%#[^])}>"'']*')
omap <expr> pL textobj#from_regexp#mapexpr('\v%#.*\ze[])}>"'']')
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>(textobj-function-'}
hook_add = '''
omap af <Plug>(textobj-function-a)
omap if <Plug>(textobj-function-i)
xmap af <Plug>(textobj-function-a)
xmap if <Plug>(textobj-function-i)
'''
hook_source = 'let g:textobj_function_no_default_key_mappings = 1'

[[plugins]]
repo = 'thinca/vim-textobj-function-javascript'
depends = 'vim-textobj-function'
on_ft = 'javascript'

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = {nox = '<Plug>'}
hook_add = '''
let g:clever_f_across_no_line = 1
let g:clever_f_mark_char = 0
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_chars_match_any_signs = ';'
let g:clever_f_ignore_case = 1
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
'''

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = ['<Plug>', '.']

####################
# Quickrun:
####################
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
depends = ['vimproc.vim']
hook_add = '''
nnoremap <silent> <Space>q :QuickRun<CR>
xnoremap <silent> <Space>q :QuickRun -mode v<CR>
'''
hook_source = '''
source ~/.config/nvim/plugins/quickrun.rc.vim
'''

####################
# Utility:
####################
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>'
on_func = ['EasyMotion#go']
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys = ';HKLYUIONM,WERTXCVBASDGJF'
" Do not shade
let g:EasyMotion_do_shade = 0
" Use upper case
let g:EasyMotion_use_upper = 1
" Smartcase
let g:EasyMotion_smartcase = 1
" Smartsign
let g:EasyMotion_use_smartsign_us = 1
" keep cursor column
let g:EasyMotion_startofline = 0
" Don't skip folded line
let g:EasyMotion_skipfoldedline = 0
" pseudo-migemo
let g:EasyMotion_use_migemo = 1
" Jump to first with enter & space
let g:EasyMotion_space_jump_first = 1
" Prompt
let g:EasyMotion_prompt = '{n}> '
'''
hook_add = '''
"nmap s <Plug>(easymotion-overwin-f2)
"vmap s <Plug>(easymotion-s2)
"omap z <Plug>(easymotion-s2)

" smart f & F
omap f <Plug>(easymotion-bd-fl)
xmap f <Plug>(easymotion-bd-fl)
omap F <Plug>(easymotion-Fl)
xmap F <Plug>(easymotion-Fl)
omap t <Plug>(easymotion-tl)
xmap t <Plug>(easymotion-tl)
omap T <Plug>(easymotion-Tl)
xmap T <Plug>(easymotion-Tl)

" hjkl
map ;h <Plug>(easymotion-linebackward)
map ;j <Plug>(easymotion-j)
map ;k <Plug>(easymotion-k)
map ;l <Plug>(easymotion-lineforward)
'''

####################
# Reference:
####################
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = ['help']

####################
# Markdown viewer
####################
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && yarn install"'

