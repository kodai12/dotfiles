[[plugins]]
repo = 'Shougo/dein.vim'

# colorsheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  colorscheme iceberg
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
# hook_post_update = '''
#   if dein#util#_is_windows()
#     let cmd = 'tools\\update-dll-mingw'
#   elseif dein#util#_is_cygwin()
#     let cmd = 'make -f make_cygwin.mak'
#   elseif executable('gmake')
#     let cmd = 'gmake'
#   else
#     let cmd = 'make'
#   endif
#   let g:dein#plugin.build = cmd
# '''

[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'cespare/vim-toml'

#-----------------------------
# make vim gui_like
#-----------------------------
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let NERDTreeShowHidden = 1
let g:nerdtree_tabs_open_on_console_startup=1
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeHighlightCursorline = 0
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
"let g:WebDevIconsUnicodeDecorateFolderNodes = 1
if exists("g:loaded_webdevicons")
    call webdevicons#refresh()
endif
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = ['nerdtree']
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
let g:NERDTreeSyntaxDisableDefaultExtensions = 1
let g:NERDTreeDisableExactMatchHighlight = 1
let g:NERDTreeDisablePatternMatchHighlight = 1
let g:NERDTreeSyntaxEnabledExtensions = ['html', 'php', 'js', 'css', 'sass', 'scss', 'yaml', 'vim', 'sh', 'bash', 'zsh', 'py', 'rs', 'markdown', 'md', 'json', 'go']
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:git_orange = 'F54D27'
let s:rspec_red = 'FE405F'

let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''

let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitconfig'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['webpack.config.js'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['node_modules'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.git'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['gemfile'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['gemfile.lock'] = ''

let g:NERDTreeExactMatchHighlightColor = {}
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange
let g:NERDTreeExactMatchHighlightColor['.gitconfig'] = s:git_orange
let g:NERDTreeExactMatchHighlightColor['.git'] = s:git_orange
let g:NERDTreeExactMatchHighlightColor['webpack.config.js'] = s:blue
let g:NERDTreeExactMatchHighlightColor['node_modules'] = s:red
let g:NERDTreeExactMatchHighlightColor['gemfile'] = s:red

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*_spec\.rb$'] = ''

let g:NERDTreePatternMatchHighlightColor = {}
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red
'''
#-----------------------------
# /make vim gui_like
#-----------------------------

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
nnoremap <silent> <SPACE>mc :MultipleCursorsFind <C-R>/<CR>
vnoremap <silent> <SPACE>mc :MultipleCursorsFind <C-R>/<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'
# depends = ['tiagofumo/vim-nerdtree-syntax-highlight']
hook_add = '''
nnoremap <SPACE>ss :Startify<CR>
let g:startify_files_number = 10
let g:startify_change_to_vcs_root = 1
let g:startify_fortune_use_unicode = 1
let g:startify_custom_indices = ['a', 'b', 'c', 'd', 'f', 'g', 'h', 'l', 'm', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

" center my header
function! s:filter_header(lines) abort
  let longest_line   = max(map(copy(a:lines), 'strwidth(v:val)'))
  let centered_lines = map(copy(a:lines),
        \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
  return centered_lines
endfunction
" set dev icons
function! StartifyEntryFormat()
  return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction

let g:ascii = [
      \ '                _                     _       _   _',
      \ '  ___    __ _  | | __   ___     ___  | |__   (_) | | __',
      \ ' / __|  / _` | | |/ /  / _ \   / __| |  _ \  | | | |/ /',
      \ ' \__ \ | (_| | |   <  | (_) | | (__  | | | | | | |   <',
      \ ' |___/  \__,_| |_|\_\  \___/   \___| |_| |_| |_| |_|\_\',
      \ '                                     _',
      \ '      _ __     ___    ___   __   __ (_)  _ __ ___',
      \ '     | `_ \   / _ \  / _ \  \ \ / / | | | `_ ` _ \',
      \ '     | | | | |  __/ | (_) |  \ V /  | | | | | | | |',
      \ '     |_| |_|  \___|  \___/    \_/   |_| |_| |_| |_|',
      \]
let g:startify_custom_header = s:filter_header(g:ascii)
let g:startify_custom_header_quotes =
      \ map(split(system('date'), '\n'), '"   ". v:val') + ['','']
let g:startify_lists = [
      \ { 'type': 'files', 'header': ['   ♻  MRU:']},
      \ { 'type': 'dir', 'header': ['   ♲  MRU'. getcwd() .':'] },
      \ { 'type': 'sessions', 'header': ['   ⚑  Sessions:']},
      \ { 'type': 'bookmarks', 'header': ['   ✎  Bookmarks:']},
      \ ]
let g:startify_bookmarks = [
      \ '~/Desktop/aratana-gateway',
      \ '~/Desktop/aratana-gateway-dashboard',
      \ '~/.config/nvim/init.vim',
      \ '~/.config/nvim/dein.toml',
      \ '~/.config/nvim/dein_lazy.toml',
      \ '~/.config/nvim/keybind.vim',
      \ '~/.config/nvim/cheatsheet.md',
      \ '~/.zshrc',
      \ '~/.zshenv',
      \ '~/.zplugins'
      \ ]
let g:startify_session_before_save = [
      \ 'echo "Cleaning up before saving.."',
      \ 'silent! NERDTreeTabsClose'
      \ ]
let g:startify_skiplist = [
    \ 'COMMIT_EDITMSG',
    \ $VIMRUNTIME .'/doc',
    \ '^/tmp',
    \ 'bundle/.*/doc',
    \ '\.DS_Store'
    \ ]
'''

#--------------------------
# git utilities
#--------------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
depends = ['vim-rhubarb']

[[plugins]]
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_open_only_vim_starting = 1
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  " Additional settings
  setlocal spell

  " If no commit message, start with insert mode
  if a:info.vcs ==# 'git' && getline(1) ==# ''
    startinsert
  end

  " Scroll the diff window from insert mode
  " Map <C-n> and <C-p>
  imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
  imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
autocmd FileType agit call s:my_agit_setting()
function! s:my_agit_setting()
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'tpope/vim-rhubarb'
#--------------------------
# git utilities
#--------------------------

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'joonty/vdebug'

[[plugins]]
repo = 'osyo-manga/vim-anzu'

#--------------------------
# theme settings
#--------------------------
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'powerline/powerline'

[[plugins]]
repo = 'kodai12/lightline-delphinus'
depends = ['lightline', 'ale', 'tagbar', 'vim-gitgutter', 'powerline', 'sky-color-clock.vim', 'toggl.vim']
hook_add = '''
let g:lightline_delphinus_use_powerline_glyphs = 1
let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
let g:lightline_delphinus_colorscheme = 'nord_improved'
let g:lightline_delphinus_tagbar_enable = 1
let g:lightline_delphinus_gitgutter_enable = 1
'''
#--------------------------
# /theme settings
#--------------------------

[[plugins]]
repo = 'junegunn/vim-easy-align'

#------------------------
# undo management
#------------------------
[[plugins]]
repo = 'mbbill/undotree'

#------------------------
# tag/brackets completion
#------------------------
[[plugins]]
repo = 'cohama/lexima.vim'

#------------------------
# split screen resizable easily
#------------------------
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd BufWritePre * :FixWhitespace
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  let g:indentLine_faster = 1
  let g:indentLine_concealcursor = ''
  let g:indentLine_conceallevel = 1
  let g:indentLine_fileTypeExclude = ['startify','help', 'nerdtree', 'tagbar', 'unite', 'tweetvim', 'qfixhowm']
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

#solidity syntax
repo = 'tomlion/vim-solidity'

[[plugins]]
repo = 'othree/yajs.vim'

# css customize
[[plugins]]
repo = 'ap/vim-css-color'

# zsh completion
[[plugins]]
repo = 'zchee/deoplete-zsh'

# github completion
[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'prettier/vim-prettier'
hook_add = '''
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'es5'
'''

# TODO aleの設定を詳しく調べる
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" 保存時のみ実行する
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" 表示に関する設定
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
highlight link ALEErrorSign Error

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_linters = {
      \   'python': ['pyflakes', 'pep8', 'flake8'],
      \   'php': ['phpstan'],
      \   'javascript': ['eslint', 'eslint-plugin-vue'],
      \   'typescript': ['tslint', 'eslint', 'typecheck'],
      \   'vue': ['prettier'],
      \   'html': ['tidy'],
      \   'css': ['stylelint'],
      \   'sass': ['stylelint'],
      \   'scss': ['stylelint'],
      \   'sql': ['sqlint'],
      \   'Dockerfile': ['hadolint'],
      \   'json': ['jsonlint'],
      \   'vim': ['vint'],
      \   'yaml': ['yamllint'],
      \   'rust': ['cargo', 'rustc'],
      \   'terraform': ['tflint'],
      \}
let g:ale_fixers = {
      \ 'javascript': [ 'eslint' ],
      \ 'json': [ 'prettier' ],
      \ 'python': [ 'black' ],
      \ 'typescript': [ 'tslint' ],
      \ }
let g:ale_echo_msg_error_str = nr2char(0xf421) . ' '
let g:ale_echo_msg_warning_str = nr2char(0xf420) . ' '
let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' '
let g:ale_echo_msg_format = '%severity%  %linter% - %s'
let g:ale_sign_column_always = 1
let g:ale_sign_error = g:ale_echo_msg_error_str
let g:ale_sign_warning = g:ale_echo_msg_warning_str
let g:ale_statusline_format = [
      \ g:ale_echo_msg_error_str . ' %d',
      \ g:ale_echo_msg_warning_str . ' %d',
      \ nr2char(0xf4a1) . '  ']
'''

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
hook_add = '''
let g:sky_color_clock#openweathermap_city_id = '1856717' " 宮崎市
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'guns/xterm-color-table.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
if = '''has('nvim')'''
hook_add = '''
  let g:tagbar_previewwin_pos    = "rightbelow"
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 1
  let g:tagbar_iconchars = [nr2char(0xe5ff) . ' ', nr2char(0xe5fe) . ' '] "  , 
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
let g:rainbow_conf = {
      \ 'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
      \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
      \ 'operators': '_,_',
      \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
      \	'separately': {
      \		'*': {},
      \		'tex': {
      \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
      \		},
      \		'lisp': {
      \			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
      \		},
      \		'vim': {
      \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
      \		},
      \		'html': {
      \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
      \		},
      \		'css': 0,
      \	}
      \}
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

#------------------------
# auto tag generate
#------------------------
[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
"let g:gutentags_ctags_tagfile = '.git/tags'
"function! s:get_gutentags_status(mods) abort
"    let l:msg = ''
"    if index(a:mods, 'ctags') >= 0
"       let l:msg .= '♨'
"     endif
"     if index(a:mods, 'cscope') >= 0
"       let l:msg .= '♺'
"     endif
"     return l:msg
"endfunction
augroup MyGutentagsStatusLineRefresher
  autocmd!
  autocmd User GutentagsUpdating call lightline#update()
  autocmd User GutentagsUpdated call lightline#update()
augroup END
'''
#------------------------
# /auto tag generate
#------------------------

#------------------------
# csv utility
#------------------------
[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'rickhowe/diffchar.vim'
hook_add = '''
let g:DiffUnit = 'Char' " any single character
let g:DiffColors = 3 " 16 colors in fixed order
let g:DiffUpdate = 1
'''
#------------------------
# /csv utility
#------------------------

#------------------------
# cheatsheet & doc
#------------------------
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '~/.config/nvim/cheatsheet.md'
nnoremap <SPACE>qq :Cheat<CR>
'''

[[plugins]]
repo = 'hecal3/vim-leader-guide'
hook_add = '''
let g:lmap =  {} " {{{
  let g:lmap = {
  \   'f': {
  \     'name': 'nerdtree',
  \   },
  \   'q': {
  \     'name': 'cheatsheet',
  \   },
  \   'd': {
  \     'name': 'denite',
  \   },
  \   'b': {
  \     'name': 'buffer',
  \   },
  \   'p': {
  \     'name': 'preview',
  \   },
  \   'j': {
  \     'name': 'jedi',
  \   },
  \   't': {
  \     'name': 'tab, tags, terminal and toggle',
  \   },
  \   'g': {
  \     'name': 'git',
  \   },
  \   's': {
  \     'name': 'session and Starttify',
  \   },
  \   'c': {
  \     'name': 'commenter',
  \   },
  \   'u': {
  \     'name': 'update and undo',
  \   },
  \   'a': {
  \     'name': 'agit',
  \   },
  \   'e': {
  \     'name': 'linter',
  \   },
  \   'noh': {
  \     'name': 'NoHighlight',
  \   },
  \ }
  " }}}
  call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
  nnoremap <silent> <Space>? :<C-u>LeaderGuide '<Space>'<CR>
'''
#------------------------
# /cheatsheet & doc
#------------------------

#------------------------
# test settings
#------------------------
[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'
if ='''has('nvim')'''

[[plugins]]
repo = 'aliev/vim-compiler-python'
hook_add = '''
let g:python_compiler_fixqflist = 1
'''

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch', 'vim-dispatch-neovim']
hook_add = '''
let g:test#strategy = 'dispatch'
let g:test#python#runner = 'nose'
let g:test#javascript#runner = 'jest'
let g:test#rust#runner = 'cargo'
let g:test#runner_commands = ['Nose', 'Jest','Mocha', 'Cargo']
let g:test#preserve_screen = 1
'''
#------------------------
# /test settings
#------------------------

#------------------------
# qfixhowm (memo plugin)
#------------------------
[[plugins]]
repo = 'fuenor/qfixhowm'
#------------------------
# /qfixhowm (memo plugin)
#------------------------

#------------------------
# openbrowser
#------------------------
[[plugins]]
repo = 'tyru/open-browser.vim'
#------------------------
# /openbrowser
#------------------------

#------------------------
# toggl settings
#------------------------
[[plugins]]
repo = 'kodai12/toggl.vim'
depends = 'vital.vim'
hook_add = '''
if filereadable(expand('~/dotfiles/nvim/env.vim'))
  source ~/dotfiles/nvim/env.vim
endif
nnoremap tt :TogglStop<CR>
nnoremap ts :TogglStart
nnoremap tag :TogglStart +aratana-gateway
nnoremap tad :TogglStart +aratana-gateway-dashboard
nnoremap tao :TogglStart +aratana-others
nnoremap te :TogglStart +env-settings
nnoremap tl :TogglStart +private-learn
vnoremap ts :TogglSelectStart<CR>
augroup autoTogglCacheUpdate
  autocmd!
  autocmd BufRead call toggl#task_cache_update()
  autocmd BufEnter call toggl#task_cache_update()
  autocmd VimEnter call toggl#task_cache_update()
  autocmd QuitPre call toggl#task_cache_update()
augroup END
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
#------------------------
# /toggl settings
#------------------------

#------------------------
# slack memo
#------------------------
[[plugins]]
repo = 'tsuyoshiwada/slack-memo-vim'
depends = 'webapi-vim'
hook_add = '''
if filereadable(expand('~/dotfiles/nvim/env.vim'))
  source ~/dotfiles/nvim/env.vim
endif
'''

[[plugins]]
repo = 'mattn/webapi-vim'
#------------------------
# /slack memo
#------------------------

#------------------------
# convinient folding
#------------------------
repo = 'pseewald/vim-anyfold'
hook_add = '''
" activate anyfold by default
augroup anyfold
    autocmd!
    autocmd Filetype python,vim,vue,javascript,html,css,scss,scala,rust,php,toml AnyFoldActivate
augroup END

" disable anyfold for large files
let g:LargeFile = 1000000 " file is large if size greater than 1MB
autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
function LargeFile()
    augroup anyfold
        autocmd! " remove AnyFoldActivate
        autocmd Filetype python,vim,vue,javascript,html,css,scss,scala,rust,php,toml setlocal foldmethod=indent " fall back to indent folding
    augroup END
endfunction
set foldlevel=2
nnoremap zq zC<CR>
nnoremap zz zO<CR>
'''
#------------------------
# /convinient folding
#------------------------

repo = 'kodai12/todoist_nvim'
hook_add = '''
if filereadable(expand('~/dotfiles/nvim/env.vim'))
  source ~/dotfiles/nvim/env.vim
endif
'''
